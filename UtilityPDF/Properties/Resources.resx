<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CompressCompleted" xml:space="preserve">
    <value>Compress &gt;&gt;&gt; COMPLETED &lt;&lt;&lt;</value>
    <comment>Information message to compress is "COMPLETED"</comment>
  </data>
  <data name="CompressLvl_0" xml:space="preserve">
    <value>VERY LOW COMPRESS --&gt; MAX QUALITY</value>
    <comment>Very Low level compress message</comment>
  </data>
  <data name="CompressLvl_1" xml:space="preserve">
    <value>LOW COMPRESS --&gt; HIGH QUALITY</value>
    <comment>Low level compress message</comment>
  </data>
  <data name="CompressLvl_2" xml:space="preserve">
    <value>MEDIUM COMPRESS --&gt; MEDIUM QUALITY</value>
    <comment>Medium level compress message</comment>
  </data>
  <data name="CompressLvl_3" xml:space="preserve">
    <value>HIGH COMPRESS --&gt; LOW QUALITY</value>
    <comment>High level compress message</comment>
  </data>
  <data name="GenericMessageError" xml:space="preserve">
    <value>An error occurred: </value>
    <comment>Generic error message</comment>
  </data>
  <data name="InfoCompleteExtraction" xml:space="preserve">
    <value>Convert &gt;&gt;&gt; COMPLETED &lt;&lt;&lt;</value>
    <comment>Information message to convert is "COMPLETED"</comment>
  </data>
  <data name="LblCompressInProgress" xml:space="preserve">
    <value>Compress PDF in progress...</value>
    <comment>Text for label when start compress</comment>
  </data>
  <data name="LblCompressionLvl" xml:space="preserve">
    <value>Compression LEVEL</value>
    <comment>Label select compression level</comment>
  </data>
  <data name="LblMergeInProgress" xml:space="preserve">
    <value>Merge PDF in progress...</value>
    <comment>Text for label when start merge</comment>
  </data>
  <data name="LblMsgInputPDF_Extr" xml:space="preserve">
    <value>PDF file from EXTRACT TEXT</value>
    <comment>Label Input PDF file from extract text</comment>
  </data>
  <data name="LblMsgOutputDIR_Extr" xml:space="preserve">
    <value>Directory Output TXT File</value>
    <comment>Label Output DIR TXT file extract text</comment>
  </data>
  <data name="LblMsgOutputDIR_Merge" xml:space="preserve">
    <value>Directory Output Merged PDF</value>
    <comment>Label Output DIR PDF merged</comment>
  </data>
  <data name="LblMsgSelLang" xml:space="preserve">
    <value>Select the language that OCR should use for extraction</value>
    <comment>Label for selection language for OCR extraction</comment>
  </data>
  <data name="LblPanelCompress" xml:space="preserve">
    <value>Compress PDF</value>
    <comment>Label for Compress Panel</comment>
  </data>
  <data name="LblPanelExtract" xml:space="preserve">
    <value>Extract Text From PDF Using OCR</value>
    <comment>Label for Extract Panel</comment>
  </data>
  <data name="LblPanelMerge" xml:space="preserve">
    <value>Merge PDF</value>
    <comment>Label for Merge Panel</comment>
  </data>
  <data name="MergeCompleted" xml:space="preserve">
    <value>Merge &gt;&gt;&gt; COMPLETED &lt;&lt;&lt;</value>
    <comment>Information message to merge is "COMPLETED"</comment>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="PDFUti" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\PDFUti.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="SpecificMessageErrorIO" xml:space="preserve">
    <value>An IO error occurred: </value>
    <comment>Specific IO error message</comment>
  </data>
  <data name="TxtAbortBtn" xml:space="preserve">
    <value>Abort</value>
    <comment>Text for button abort extract</comment>
  </data>
  <data name="TxtCompressBtn" xml:space="preserve">
    <value>Compress</value>
    <comment>Text for button start compress</comment>
  </data>
  <data name="TxtExitBtn" xml:space="preserve">
    <value>Exit</value>
    <comment>Text for button Exit/Close</comment>
  </data>
  <data name="TxtExtractBtn" xml:space="preserve">
    <value>Extract</value>
    <comment>Text for button start extract</comment>
  </data>
  <data name="TxtMergetBtn" xml:space="preserve">
    <value>Merge</value>
    <comment>Text for button start merge</comment>
  </data>
  <data name="TxtOutputDirBtn" xml:space="preserve">
    <value>Select DIR </value>
    <comment>Text for button select output DIR</comment>
  </data>
  <data name="TxtResetBtn" xml:space="preserve">
    <value>Reset</value>
    <comment>Text for button reset</comment>
  </data>
  <data name="TxtSelectPDFBtn" xml:space="preserve">
    <value>Select PDF</value>
    <comment>Text for button select PDF</comment>
  </data>
  <data name="WarnAbortedExtraction" xml:space="preserve">
    <value>Convert &gt;&gt;&gt; ABORTED &lt;&lt;&lt; !!!</value>
    <comment>Warning message to convert "ABORTED"</comment>
  </data>
  <data name="WarnConfirmAbort" xml:space="preserve">
    <value>Do you confirm extraction &gt;&gt;&gt; ABORT &lt;&lt;&lt; ?</value>
    <comment>Warning message to confirm ABORT extraction</comment>
  </data>
  <data name="WarnSelectOutDirCOMP" xml:space="preserve">
    <value>If a PDF file with the same name already exists (OUTPUT file will have the SAME NAME_COMPRESSED as the selected PDF file) in the folder you select, it will be overwritten!!!</value>
    <comment>Warning message when select output directory for pdf compressed</comment>
  </data>
  <data name="WarnSelectOutDirMERGE" xml:space="preserve">
    <value>If a PDF file with the same name already exists (PDF_MERGED file will have the SAME NAME + MERGED as the first selected PDF file) in the folder you select, it will be overwritten!!!</value>
    <comment>Warning message when select output directory for pdf merged</comment>
  </data>
  <data name="WarnSelectOutDirTXT" xml:space="preserve">
    <value>If a TXT file with the same name already exists (TXT file will have the SAME NAME as the selected PDF file) in the folder you select, it will be overwritten!!!</value>
    <comment>Warning message when select output directory fot txt contain extracted pdf text</comment>
  </data>
</root>